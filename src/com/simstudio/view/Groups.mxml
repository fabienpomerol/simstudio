<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:services="services.*" width="1254" height="556" initialize="init()">
	<fx:Declarations>
		<!-- Placer ici les éléments non visuels (services et objets de valeur, par exemple). -->
		<mx:CallResponder id="getGroupsResult"/>
		<!--<services:GroupDAO id="groupDAO"
						  fault="Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail)"
						  result="resultHandler(event)"
						  showBusyCursor="true"/>-->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import flashx.textLayout.formats.BackgroundColor;
			
			import mx.containers.Canvas;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.controls.Image;
			import mx.core.Application;
			import mx.core.FlexGlobals;
			import mx.core.UIComponent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			import spark.components.Application;
			import spark.components.Label;
			import spark.components.VGroup;
			
			import valueObjects.File;
			import valueObjects.Group;
			import valueObjects.Message;
			import valueObjects.User;
			
			
			private var _newCanvas:Canvas;
			
			/**
			 * the instance of the edit popup showed
			 */
			private var _openEditPopUp:Canvas;
			
			/**
			 * the instance of the edit popup showed
			 */
			private var _lastOpenedEditButton:Image;
			
			private var _imgEditOver:String = "assets/edit_black.png";
			private var _imgEditOut:String = "assets/edit_white.png";

			/*private function resultHandler(result:ResultEvent):void {
				var items:Object = result.result;
				var groups:Array = [];
				for (var i:String in items) {
					groups.push(items[i]);
				}
				processNextItem(groups);
			}*/
			
			
			protected function processNextItem(groups:Array):void{
				if(groups.length <= 0){
					//Alert.show("Groups empty");
				}else{
					try{
					var item:Object = groups.pop();
					var ro:RemoteObject = new RemoteObject;
					ro.destination = "groupDAO";
					function asyncProcessComplete(e:ResultEvent):void{
						ro.removeEventListener("result",asyncProcessComplete)
						var mess = e.result;
						try{
							addGroup(item.id, item.name, mess);
						}catch(err:Error)
						{
							Alert.show("Erreur pour addGroup : "+item.name+" "+err.message);
						}
						processNextItem(groups);
					}
					ro.getLastGroupMessage.addEventListener("result",asyncProcessComplete);
					ro.getLastGroupMessage.addEventListener("fault", faultHandler);
					ro.getLastGroupMessage(item.id);
					}catch(err:Error)
					{
						Alert.show('2 :'+err.message);
					}
					
				}	
			}
			
			protected function faultHandler(e:ResultEvent):void
			{
				Alert.show('Ooops!! It seem that you have an asyncprocess error.');
			}
			
			private function init():void{
				//@todo refactored
				var ro:RemoteObject = new RemoteObject();
				ro.destination = "sessionDAO";
				
				ro.getSessionAttribute.addEventListener("result", getUserResultHandler);	
				ro.getSessionAttribute.addEventListener("fault", faultHandler);	
				ro.getSessionAttribute('user');
			
			}
			
			private function getUserResultHandler(result:ResultEvent):void{
				try{
					var user = result.result;
					//Alert.show(user.groups_2.getItemAt(1)+"");
					var groups = user.groups_2.toArray();
					
					processNextItem(groups);
					//var gr:Array;
				}
				catch(err:Error){
					Alert.show('1 :'+err.message);
				}
			}
			
			private function addGroup(id:int, name:String, mess):void {
				var imageEdit:Image = new Image();
				imageEdit.width=35;
				imageEdit.height=34;
				imageEdit.name=id.toString();
				imageEdit.load(this._imgEditOut);
				imageEdit.buttonMode=true;
				imageEdit.addEventListener(MouseEvent.CLICK, OpenEditPopUp);
				
				var groupLabel:Label = new Label();
				groupLabel.text = name;
				groupLabel.setStyle("fontSize", 12);
				groupLabel.setStyle("fontWeight", "bold");
				groupLabel.x = 50;
				groupLabel.y = 13;
				groupLabel.buttonMode=true;
				groupLabel.addEventListener(MouseEvent.MOUSE_OVER, HighlightGroupLink);
				groupLabel.addEventListener(MouseEvent.MOUSE_OUT, DarkenGroupLink);
				groupLabel.addEventListener(MouseEvent.CLICK, function groupResult(e:Event):void{
					showGroup(e, id);
				});

				var month:String="";
				
				if(mess.id){
				
				if (mess.createdAt.month+1<10) {
					month = "0"+(mess.createdAt.month+1);
				}
				else {
					month=""+(mess.createdAt.month+1);
				}
				
				var lastMessageLabel:Label = new Label();
				lastMessageLabel.text = "Last post the "+mess.createdAt.date+"/"+month+"/"+mess.createdAt.fullYearUTC;
				lastMessageLabel.setStyle("fontSize", 12);
				lastMessageLabel.setStyle("fontStyle", "italic");
				lastMessageLabel.x = 500;
				lastMessageLabel.y = 13;
				
				}
				else
				{
					var lastMessageLabel:Label = new Label();
					lastMessageLabel.text = "No message";
					lastMessageLabel.setStyle("fontSize", 12);
					lastMessageLabel.setStyle("fontStyle", "italic");
					lastMessageLabel.x = 500;
					lastMessageLabel.y = 13;
				}
					
				var myCanvas:Canvas = new Canvas();
				myCanvas.setStyle("marginTop", "5");
				myCanvas.setStyle("backgroundColor", "#707070");

				myCanvas.setStyle("y", 25);
				myCanvas.width=720;
				myCanvas.height=35;
				myCanvas.name="name"+id;
				myCanvas.addChild(imageEdit);
				myCanvas.addChild(groupLabel);
				myCanvas.addChild(lastMessageLabel);
				myCanvas.addEventListener(MouseEvent.MOUSE_OVER, HighlightBackground);
				myCanvas.addEventListener(MouseEvent.MOUSE_OUT, DarkenBackground);
				
				var myHbox:HBox = new HBox();
				myHbox.width=720;
				myHbox.height=35;
				myHbox.name="Hbox"+id;
				myHbox.addChild(myCanvas);
				myVbox.addChild(myHbox);
			}
			
			private function showGroup(e:Event, i:int):void {
				var ro:RemoteObject = new RemoteObject();
				ro.destination = "sessionDAO";
				ro.saveSessionAttribute.addEventListener("result", saveSessionResultHandler);	
				ro.saveSessionAttribute.addEventListener("fault", faultHandler);	
				ro.saveSessionAttribute('groupShow', i);
				
				FlexGlobals.topLevelApplication.Account.currentState = "group_view";
				FlexGlobals.topLevelApplication.dispatchEvent(new Event("showGroup"));
			}
			
			protected function saveSessionResultHandler(e:ResultEvent):void {
				
			}
			
			private function HighlightBackground(e:Event):void {
				var myCanvas:Canvas = e.currentTarget as Canvas;
				myCanvas.setStyle("backgroundColor", "#989898");
			}
			
			private function DarkenBackground(e:Event):void {
				var myCanvas:Canvas = e.currentTarget as Canvas;
				myCanvas.setStyle("backgroundColor", "#707070");
			}
			
			private function OpenGroup(e:Event):void {
				Alert.show("todo link to the group");
			}
			
			private function HighlightGroupLink(e:Event):void {
				var link:Label = e.currentTarget as Label;
				link.setStyle("color", "#333333");
			}
			
			private function DarkenGroupLink(e:Event):void {
				var link:Label = e.currentTarget as Label;
				link.setStyle("color", "#ffffff");
			}
			
			/**
			 * Open the edit popup and close 
			 */
			private function OpenEditPopUp(e:Event):void {
				var editBtn:Image = e.currentTarget as Image;
				
				if(_lastOpenedEditButton == null){
					_lastOpenedEditButton = editBtn;
				}
				else {
					_lastOpenedEditButton.load(_imgEditOut)
					_lastOpenedEditButton = editBtn;
				}
				
				if(_openEditPopUp == null)
				{
					editBtn.load(_imgEditOver);
					configureEditPopUP(editBtn);
					this['globalCanvas'].addChild(_openEditPopUp);
				}
				else {
					this['globalCanvas'].removeChild(_openEditPopUp);
					_openEditPopUp = null;
					editBtn.load(_imgEditOut);
				}
			}
			
			private function CloseEditPopUp():void {
				this['globalCanvas'].removeChild(_openEditPopUp);
				_openEditPopUp = null;
			}
			
		
			/**
			 * @todo refactored to show admin only when the user is the group admin
			 * Configure the edit popup with right submenu
			 */
			private function configureEditPopUP(editBtn:Image):void {
			
				_openEditPopUp = new Canvas();
				_openEditPopUp.width=130;
				_openEditPopUp.height=70;
				_openEditPopUp.setStyle("backgroundColor", "#f0eded");
				_openEditPopUp.x=5;
				_openEditPopUp.y=editBtn.parent.parent.y+44;
				
				var quitGroupMenu:Label = new Label();
				quitGroupMenu.width=130;
				quitGroupMenu.height=25;
				quitGroupMenu.text="Leave the group";
				quitGroupMenu.setStyle("textAlign", "center");
				quitGroupMenu.setStyle("color", "#000000");
				quitGroupMenu.setStyle("fontWeight", "bold");
				quitGroupMenu.setStyle("verticalAlign", "middle");
				quitGroupMenu.y=10;
				quitGroupMenu.buttonMode=true;
				quitGroupMenu.addEventListener(MouseEvent.MOUSE_OVER, HighlightMenuLabelBackground);
				quitGroupMenu.addEventListener(MouseEvent.MOUSE_OUT, DarkenMenuLabelBackground);
				quitGroupMenu.addEventListener(MouseEvent.CLICK, function test(e:Event):void{
					leaveGroupAction(e, editBtn.name);
				});
				
				var adminGroupMenu:Label = new Label();
				adminGroupMenu.width=130;
				adminGroupMenu.height=25;
				adminGroupMenu.text="Admin the group";
				adminGroupMenu.setStyle("textAlign", "center");
				adminGroupMenu.setStyle("color", "#000000");
				adminGroupMenu.setStyle("fontWeight", "bold");
				adminGroupMenu.setStyle("verticalAlign", "middle");
				adminGroupMenu.y=35;
				adminGroupMenu.buttonMode=true;
				adminGroupMenu.addEventListener(MouseEvent.MOUSE_OVER, HighlightMenuLabelBackground);
				adminGroupMenu.addEventListener(MouseEvent.MOUSE_OUT, DarkenMenuLabelBackground);
				adminGroupMenu.addEventListener(MouseEvent.CLICK, function test(e:Event):void{
					leaveGroupAction(e, editBtn.name);
				});
				
				_openEditPopUp.addChild(quitGroupMenu);
				_openEditPopUp.addChild(adminGroupMenu);
			}
			
			
			private function HighlightMenuLabelBackground(e:Event):void {
				var link:Label = e.currentTarget as spark.components.Label;
				link.setStyle("backgroundColor", "#f09620");
				link.setStyle("color", "#ffffff");
			}
			
			private function leaveGroupAction(e:Event, id:String):void {
				var vbox:VBox = this['myVbox'];
				var hbox:HBox = vbox.getChildByName("Hbox"+id) as HBox;
				
				hbox.removeAllChildren();
				CloseEditPopUp();
			}
			
			/**
			 * Remove highlight on the popup menu on mouse over
			 */
			private function DarkenMenuLabelBackground(e:Event):void {
				var link:Label = e.currentTarget as Label;
				link.setStyle("backgroundColor", "#f0eded");
				link.setStyle("color", "#000000");
			}
		
		]]>
	</fx:Script>

	<mx:Canvas id="globalCanvas" x="1" y="37">
	<mx:VBox id="myVbox" x="5" y="10" width="720" height="700" verticalAlign="top" direction="vertical" maxWidth="720" />
	<mx:HBox id="myHbox" x="5" y="10" width="1214" height="700" verticalAlign="top" direction="vertical" maxWidth="720" />

	</mx:Canvas>
	<s:Label id="groupLabel" x="6" y="14" fontFamily="Arial" fontSize="18" fontWeight="normal" text="My Groups"/>
</s:Group>
